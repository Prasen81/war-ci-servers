# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'
variables:
  name: '$(Build.DefinitionName)_$(Build.SourceBranchName)_$(Build.BuildNumber)'
stages:
      - stage: START
        jobs:
         - job: pipelinestart
           steps:
           - script: echo Pipeline to build , test and create Docker Image
             displayName: 'Started Pipeline'
           - script: echo $(System.DefaultWorkingDirectory) && echo $(Build.ArtifactStagingDirectory)
           - script: echo $(name)
      - stage: 
        jobs:
         - job: BuildPipeline
           variables:
               docker_username: 'praqmasofus'
           steps:
              - bash: ci/build-app.sh
                displayName: 'Build'
              - bash: ci/unit-test-app.sh
                displayName: 'Test'
              - task: CopyFiles@1
                inputs:
                 Contents: 'build/libs/app-*-all.jar app.jar'
                 targetFolder: '$(System.DefaultWorkingDirectory)'
              - task: PublishBuildArtifacts@1
                inputs:                   
                   pathtoPublish: '$(System.DefaultWorkingDirectory)'
                   artifactName: Website
         - job: DockerBuild
           dependsOn: BuildPipeline
           steps:
              - task: DownloadBuildArtifacts@0
                inputs:
                 artifactName: Website
                 downloadPath: '$(System.DefaultWorkingDirectory)'  
              - task: CopyFiles@2
                inputs:
                 SourceFolder: '$(System.DefaultWorkingDirectory)'
                 TargetFolder: 'build/libs/app-*-all.jar app.jar'             
              - bash: echo $(docker_username)
              - bash: ci/build-docker.sh
                displayName: 'Docker Build'
              - bash: ci/push-docker.sh
                displayName: 'Docker Image Push'                
              - bash: ci/component-test.sh
                displayName: 'Docker compose'
